#!/usr/bin/env node

/**
 * Module dependencies.
 */
const Chat = require('../models/chat.model');
const app = require('../app');
const debug = require('debug')('untitled:server');
const http = require('http');

/**
 * Get port from environment and store in Express.
 */
const port = normalizePort(process.env.PORT || '3001');
app.set('port', port);

/**
 * Create HTTP server.
 */
const server = http.createServer(app);
const io = require('socket.io').listen(server);

io.on('connection', (socket) => {
  socket.on('chat message', async (msg) => {
    let chat = new Chat({
      type: 1,
      trip_id: msg[0],
      user_id_sender: msg[1],
      message: msg[2],
    });
    await chat.save();
    await Chat.findOne({ _id: chat._id })
      .populate('user_id_sender')
      .exec((err, messages) => {
        io.emit('chat message', messages);
      });
  });

  socket.on('image message', async (msq) => {
    io.emit('chat message', msq);
  });

  socket.on('startLocation', async (data) => {
    // let listSocket = [];
    // listSocket = listSocket.concat(data);
    // console.log(listSocket);
    let chat = new Chat({
      type: 3,
      trip_id: data[0],
      user_id_sender: data[1],
      location: {
        longtitude: data[2].longitude,
        latitude: data[2].latitude,
        isShareLocation: true,
      },
    });
    await chat.save();
    await Chat.findOne({ _id: chat._id })
      .populate('user_id_sender')
      .exec((err, messages) => {
        io.emit('chat message', messages);
      });
  });

  socket.on('stopLocation', async (data) => {
    let stopLocation = await Chat.findOneAndUpdate(
      {
        _id: data._id,
      },
      {
        $set: {
          location: {
            longtitude: data.location.longtitude,
            latitude: data.location.latitude,
            isShareLocation: false,
          },
          update_date: Date.now(),
        },
      },
      {
        options: {
          new: true,
          multi: true,
        },
      },
    );
    await Chat.findOne({ _id: stopLocation._id })
      .populate('user_id_sender')
      .exec((err, messages) => {
        io.emit('chat message', messages);
      });
  });
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
